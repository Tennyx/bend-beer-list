{"version":3,"sources":["Client.js","App.js","serviceWorker.js","index.js"],"names":["checkStatus","response","status","error","Error","statusText","parseJSON","json","Client","search","query","cb","fetch","headers","then","BreweryList","props","state","breweryList","clickedCircle","toggleCircle","bind","e","currentBreweryList","this","componentId","currentTarget","id","i","length","flippedBoolean","visited","setState","obj","breweryData","url","data","method","body","JSON","stringify","res","console","log","catch","className","map","d","icon","fasCircle","size","onClick","color","key","name","location","Component","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAYA,SAASA,EAAYC,GACnB,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC9C,OAAOD,EAET,IAAME,EAAQ,IAAIC,MAAJ,qBAAwBH,EAASI,aAG/C,MAFAF,EAAMD,OAASD,EAASI,WACxBF,EAAMF,SAAWA,EACXE,EAGR,SAASG,EAAUL,GACjB,OAAOA,EAASM,OAGlB,IACeC,EADA,CAAEC,OA1BjB,SAAgBC,EAAOC,GACrB,OAAOC,MAAM,mBAAoB,CAC/BC,QAAU,CACR,eAAgB,mBAChB,OAAU,sBAGbC,KAAKd,GACLc,KAAKR,GACLQ,KAAKH,K,wBCDFI,E,YACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,YAAc,GACdC,cAAgB,CAAC,GAAE,IAErB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANJ,E,0EASLC,GAIX,IAHA,IAAIC,EAAqBC,KAAKP,MAAMC,YAChCO,EAAcH,EAAEI,cAAcC,GAE1BC,EAAE,EAAEA,EAAEL,EAAmBM,OAAOD,IACtC,GAAGL,EAAmBK,GAAGD,IAAMF,EAAY,CACzC,IAAIK,GAAkBP,EAAmBK,GAAGG,QAC5CR,EAAmBK,GAAGG,QAAUD,EAChCN,KAAKQ,SAAS,CACAd,YAAcK,EACd,cAAkB,CAACA,EAAmBK,GAAGD,GAAIG,Q,0CAM7C,IAAD,OACjBtB,EAAOC,OAAO,aAAa,SAACwB,GAC1B,EAAKD,SAAS,CAACd,YAAce,S,yCAIdjB,GACjB,IAAIkB,EAAcV,KAAKP,MAAME,cACzBgB,EAAM,oBAAsBD,EAAY,GACxCE,EAAO,CAACL,QAASG,EAAY,IAEjCtB,MAAMuB,EAAK,CACTE,OAAQ,MACRC,KAAMC,KAAKC,UAAUJ,GACrBvB,QAAQ,CACN,eAAgB,sBAEjBC,MAAK,SAAA2B,GAAG,OAAIA,EAAIlC,UAClBO,MAAK,SAAAb,GAAQ,OAAIyC,QAAQC,IAAI,WAAYJ,KAAKC,UAAUvC,OACxD2C,OAAM,SAAAzC,GAAK,OAAIuC,QAAQvC,MAAM,SAAUA,Q,+BAGjC,IAAD,OACN,OACE,yBAAK0C,UAAU,wBAAwBlB,GAAG,mBACtC,yBAAKkB,UAAU,8BACb,yBAAKA,UAAU,8BACf,yBAAKA,UAAU,6BAAf,WACA,yBAAKA,UAAU,6BAAf,YACA,yBAAKA,UAAU,+BAIjBrB,KAAKP,MAAMC,YAAY4B,KAAI,SAACC,GAAD,OAC3B,yBAAKF,UAAU,8BACb,yBAAKA,UAAU,8BAA6B,kBAAC,IAAD,CAAiBG,KAAMC,IAAWC,KAAK,KAAKL,UAAU,cAAcM,QAAS,EAAK/B,aAAcO,GAAIoB,EAAEpB,GAAIyB,MAAOL,EAAEhB,QAAU,UAAY,aACrL,yBAAKc,UAAU,gBAAgBQ,IAAKN,EAAEO,MAAOP,EAAEO,MAC/C,yBAAKT,UAAU,gBAAgBQ,IAAKN,EAAEQ,UAAWR,EAAEQ,UACnD,yBAAKV,UAAU,uC,GAhEDW,aAuFXC,E,2MAdbxC,MAAQ,G,wEAMN,OACE,yBAAK4B,UAAU,OACb,kBAAC,EAAD,W,GATUW,aCpEEE,QACW,cAA7BC,OAAOJ,SAASK,UAEe,UAA7BD,OAAOJ,SAASK,UAEhBD,OAAOJ,SAASK,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtD,MAAK,SAAAuD,GACjCA,EAAaC,kB","file":"static/js/main.f3a76de0.chunk.js","sourcesContent":["function search(query, cb) {\n  return fetch('api/v1/breweries', {\n    headers : { \n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  })\n  .then(checkStatus)\n  .then(parseJSON)\n  .then(cb);\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new Error(`HTTP Error ${response.statusText}`);\n  error.status = response.statusText;\n  error.response = response;\n  throw error;\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}\n\nconst Client = { search };\nexport default Client;\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Client from './Client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircle as fasCircle } from '@fortawesome/free-solid-svg-icons';\n\nclass BreweryList extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      breweryList : [],\n      clickedCircle : [0,false]\n    };\n    this.toggleCircle = this.toggleCircle.bind(this);\n  }\n\n  toggleCircle(e){\n    let currentBreweryList = this.state.breweryList;\n    let componentId = e.currentTarget.id;\n\n    for(let i=0;i<currentBreweryList.length;i++){\n      if(currentBreweryList[i].id == componentId){\n        let flippedBoolean = !currentBreweryList[i].visited;\n        currentBreweryList[i].visited = flippedBoolean;\n        this.setState({\n                      breweryList : currentBreweryList,\n                      'clickedCircle' : [currentBreweryList[i].id, flippedBoolean]\n                      })\n      }\n    }\n  }\n\n  componentDidMount(){\n    Client.search('breweries', (obj) => {\n      this.setState({breweryList : obj});\n    });\n  }\n\n  componentDidUpdate(props){\n    let breweryData = this.state.clickedCircle;\n    let url = 'api/v1/breweries/' + breweryData[0];\n    let data = {visited: breweryData[1]};\n\n    fetch(url, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n      headers:{\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json())\n    .then(response => console.log('Success:', JSON.stringify(response)))\n    .catch(error => console.error('Error:', error)); \n  }\n\n  render(){\n    return(\n      <div className=\"container text-center\" id=\"table-container\">\n          <div className=\"row justify-content-center\">\n            <div className=\"col-md-1 cell placeholder\"></div>\n            <div className=\"col-md-3 cell cell-header\">Brewery</div>\n            <div className=\"col-md-3 cell cell-header\">Location</div>\n            <div className=\"col-md-1 cell placeholder\"></div>\n          </div>\n          \n          {\n          this.state.breweryList.map((d) =>\n          <div className=\"row justify-content-center\">\n            <div className=\"col-md-1 cell circle-check\"><FontAwesomeIcon icon={fasCircle} size=\"lg\" className=\"circle-font\" onClick={this.toggleCircle} id={d.id} color={d.visited ? '#5cd152' : '#ebebeb'} /></div>\n            <div className=\"col-md-3 cell\" key={d.name}>{d.name}</div>\n            <div className=\"col-md-3 cell\" key={d.location}>{d.location}</div>\n            <div className=\"col-md-1 cell placeholder\"></div>\n          </div>)\n          }\n      </div>  \n    );\n  }\n}\n\nclass App extends Component {\n  state = {\n  }\n\n\n  render() {\n\n    return (\n      <div className='App'>\n        <BreweryList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}